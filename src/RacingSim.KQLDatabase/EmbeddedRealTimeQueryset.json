{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "6435e3fe-3d97-45b4-8de8-4138bc519fd7",
        "clusterUri": "https://trd-b47uux0xpj5t4jur1x.z3.kusto.fabric.microsoft.com",
        "type": "Fabric",
        "databaseItemId": "db01c7c3-88f5-4b5e-b192-07c7ec481eb1",
        "databaseItemName": "RacingSim"
      }
    ],
    "tabs": [
      {
        "id": "317e38e1-8c02-42fa-9f2e-a0b7af4e47e5",
        "content": ".show cluster \n\nOngoingRaceSession\n\nGetPivotedPositionData\n\n\n\n\nCarTelemetry\n| where TelemetryPoint in (\"PositionX\", \"PositionZ\")\n| summarize arg_max(EndTime,*) by CarId, TelemetryPoint\n\n",
        "title": "",
        "dataSourceId": "6435e3fe-3d97-45b4-8de8-4138bc519fd7"
      },
      {
        "id": "338476c6-a5f4-4a79-baab-d8c4731547a2",
        "content": ".create-or-alter function with (folder = \"Plotly\", skipvalidation = \"true\") PlotlyGaugeFl(value:real, max_range:real=real(null), mode:string=\"gauge+number\", chart_title:string=\"\", font_color:string=\"black\", bar_color:string=\"green\", bar_bg_color:string=\"lightgreen\", tick_color:string=\"darkblue\", tick_width:int=1) {\n    let gauge_chart = toscalar(PlotlyTemplate | where name == \"gauge\" | project plotly);\n      print plotly = gauge_chart\n    | extend plotly=replace_string(plotly, '$VALUE$', tostring(value))\n    | extend plotly=replace_string(plotly, '$MAX_RANGE$', iff(isnull(max_range), 'null', tostring(max_range)))\n    | extend plotly=replace_string(plotly, '$MODE$', mode)\n    | extend plotly=replace_string(plotly, '$TITLE$', chart_title)\n    | extend plotly=replace_string(plotly, '$FONT_COLOR$', font_color)\n    | extend plotly=replace_string(plotly, '$BAR_COLOR$', bar_color)\n    | extend plotly=replace_string(plotly, '$BAR_BG_COLOR$', bar_bg_color)\n    | extend plotly=replace_string(plotly, '$TICK_COLOR$', tick_color)\n    | extend plotly=replace_string(plotly, '$TICK_WIDTH$', tostring(tick_width))\n    | project plotly\n}\n\n\nGenerate\n\n.create-or-alter function with (skipvalidation = \"true\") GenerateLeaderboard(SelectedDate:datetime=datetime(null)) {\n    let session_lap_summary =\n        CarTelemetry\n        | where TelemetryPoint == \"DistanceTraveled\"\n        | where todouble(Data) > 0\n        | where isempty(SelectedDate) or StartTime between (startofday(SelectedDate) .. endofday(SelectedDate))\n        | project\n            sessionLapKey = strcat(SessionId, \"-\", LapId),\n            SessionId,\n            SessionName,\n            LapId,\n            TelemetryPoint,\n            data = toint(Data),\n            Email     \n        | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId, Email\n        | extend LapDistanceTraveled = MaxDistance - MinDistance\n        | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);\n     let session_laptime =\n        CarTelemetry\n        | where TelemetryPoint == \"CurrentLapTimer\"\n        | where todouble(Data) > 0\n        | where isempty(SelectedDate) or StartTime between (startofday(SelectedDate) .. endofday(SelectedDate))\n        | project\n            sessionLapKey = strcat(SessionId, \"-\", LapId),\n            timer = todouble(Data) * 1s,\n            StartTime,\n            EndTime\n        | summarize StartTime=min(StartTime), EndTime=max(EndTime), LapTime = max(timer) by sessionLapKey;\n     session_lap_summary\n    | join kind=inner session_laptime on sessionLapKey\n    | project\n        SessionId,\n        SessionName,\n        LapId,\n        StartTime,\n        EndTime,\n        LapTime,\n        LapTime_string = tostring(LapTime),\n        InvalidLap,\n        LapDistanceTraveled,\n        Email\n    | sort by LapTime asc\n    | filter InvalidLap == false\n    | extend Rank=row_rank_min(LapTime)\n}\n\n\n\n\n.create-or-alter function with (skipvalidation = \"true\") GetSessionLapData(SelectedDate:datetime=datetime(null), SelectTop:int=10) {\n    let session_lap_summary =\n        CarTelemetry\n        | where TelemetryPoint == \"DistanceTraveled\"\n        | where (todouble(Data)) > 0\n        | where isempty(SelectedDate) or StartTime between (startofday(SelectedDate) .. endofday(SelectedDate))\n        | filter SessionName != \"Anonymous\"\n        | project\n            sessionLapKey = strcat(SessionId, \"-\", LapId),\n            SessionId,\n            SessionName,\n            LapId,\n            TelemetryPoint,\n            data = toint(Data)\n        | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId\n        | extend LapDistanceTraveled = MaxDistance - MinDistance\n        | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);\n     let session_laptime =\n        CarTelemetry\n        | where TelemetryPoint == \"CurrentLapTimer\"\n        | where todouble(Data) > 0\n        | where isempty(SelectedDate) or StartTime between (startofday(SelectedDate) .. endofday(SelectedDate))\n        | filter SessionName != \"Anonymous\"\n        | project\n            sessionLapKey = strcat(SessionId, \"-\", LapId),\n            LapTime = todouble(Data) * 1s,\n            StartTime,\n            EndTime\n        | summarize arg_max(StartTime, *) by sessionLapKey;\n     session_lap_summary\n    | join kind=inner session_laptime on sessionLapKey\n    | where LapTime > 2m\n    | project\n        SessionId,\n        SessionName,\n        sessionLapKey,\n        LapId,\n        StartTime,\n        EndTime,\n        tostring(LapTime),\n        InvalidLap,\n        LapDistanceTraveled\n    | summarize arg_max(LapTime,*) by SessionName\n    | sort by LapTime asc\n    | filter InvalidLap == false    \n    | extend Rank=row_rank_min(LapTime)\n    | where Rank <= SelectTop\n}\n\n\nGetSessionLapData(SelectedDate=datetime(\"2025-09-04\"))\n\n.show cluster ",
        "title": "",
        "dataSourceId": "6435e3fe-3d97-45b4-8de8-4138bc519fd7"
      }
    ]
  }
}