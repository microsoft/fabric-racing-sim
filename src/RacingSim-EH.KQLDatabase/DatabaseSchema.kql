// KQL script
// Use management commands in this script to configure your database items, such as tables, functions, materialized views, and more.


.create-merge table rawtelemetry (ChannelId:string, CarId:string, SessionId:guid, SessionName:string, Email:string, Telephone:long, LapId:string, SampleCount:int, Frequency:int, Timespan:dynamic, Data:dynamic) 
.create-or-alter table rawtelemetry ingestion json mapping 'rawtelemetry_mapping'
```
[{"Properties":{"Path":"$['ChannelId']"},"column":"ChannelId","datatype":""},{"Properties":{"Path":"$['CarId']"},"column":"CarId","datatype":""},{"Properties":{"Path":"$['SessionId']"},"column":"SessionId","datatype":""},{"Properties":{"Path":"$['SessionName']"},"column":"SessionName","datatype":""},{"Properties":{"Path":"$['Email']"},"column":"Email","datatype":""},{"Properties":{"Path":"$['Telephone']"},"column":"Telephone","datatype":""},{"Properties":{"Path":"$['LapId']"},"column":"LapId","datatype":""},{"Properties":{"Path":"$['SampleCount']"},"column":"SampleCount","datatype":""},{"Properties":{"Path":"$['Frequency']"},"column":"Frequency","datatype":""},{"Properties":{"Path":"$['Timespan']"},"column":"Timespan","datatype":""},{"Properties":{"Path":"$['Data']"},"column":"Data","datatype":""}]
```
.create-merge table car_telemetry (TelemetryPoint:string, CarId:string, SessionId:guid, LapId:string, StartTime:datetime, EndTime:datetime, Data:dynamic, SessionName:string, Email:string, Telephone:long) with (folder = "Silver Layer") 
.create-merge table PlotlyTemplate (name:string, plotly:string) 
.create-or-alter function with (folder = "Bronze to Silver Transformation Functions", skipvalidation = "true") GetCarTelemetry() {
rawtelemetry
| extend StartTime= unixtime_milliseconds_todatetime(tolong(Timespan.StartTS)) , EndTime = unixtime_milliseconds_todatetime(tolong(Timespan.EndTS))
| mv-expand Data
| project TelemetryPoint = ChannelId , CarId, SessionId, LapId, StartTime, EndTime, Data, SessionName, Email, Telephone
}
.create-or-alter function with (skipvalidation = "true") GetSessions() {
    car_telemetry
    | summarize Date=format_datetime(min(StartTime), 'yyyy-MM-dd'), StartTime=format_datetime(min(StartTime),'H:mm:ss'), EndTime=format_datetime(max(EndTime),'H:mm:ss') by SessionId, SessionName, CarId, Email, Telephone
    | filter SessionName != "Anonymous"
}
.create-or-alter function with (skipvalidation = "true") GetSessionLapData() {
    let session_lap_summary =
    car_telemetry
    | where TelemetryPoint =="DistanceTraveled"
    | where (todouble(Data)) > 0
    | project sessionLapKey = strcat(SessionId, "-", LapId), SessionId, SessionName, LapId, TelemetryPoint, data = toint(Data)
    | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId
    | extend LapDistanceTraveled = MaxDistance - MinDistance
    | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);
    let session_laptime =
    car_telemetry
    | where TelemetryPoint =="CurrentLapTimer"
    | where todouble(Data) > 0
    | project sessionLapKey = strcat(SessionId, "-", LapId), LapTime = todouble(Data) * 1s, StartTime, EndTime
    | summarize arg_max(StartTime, *) by sessionLapKey;
    //| summarize StartTime=min(StartTime), EndTime=max(EndTime), LapTime = max(timer) by sessionLapKey;
    session_lap_summary
    | join kind=inner session_laptime on sessionLapKey
    | project SessionId, SessionName, sessionLapKey, LapId,StartTime, EndTime, tostring(LapTime), InvalidLap, LapDistanceTraveled
    | sort by LapTime asc
    | filter InvalidLap == false
    | extend Rank=row_rank_min(LapTime)
}
.create-or-alter function with (skipvalidation = "true") GetPivotedTelemetryData() {    
    car_telemetry
   // | where SessionId == pSessionId
    | where (TelemetryPoint == "Gear" and Data <> 11) or TelemetryPoint in ("Steer", "DistanceTraveled", "Brake", "Accel", "Speed", "PositionX", "PositionZ")
    | order by StartTime asc
    | project sessionLapKey = strcat(SessionId, "-", LapId), EndTime, TelemetryPoint, point=todouble(Data)
    | evaluate pivot(TelemetryPoint, avg(point));
}
.create-or-alter function with (skipvalidation = "true") GenerateLeaderboard() {
    let session_lap_summary =
    car_telemetry
    | where TelemetryPoint =="DistanceTraveled"
    //| where StartTime between (startofday(now()).. endofday(now()))
    | where (todouble(Data)) > 0
    | project sessionLapKey = strcat(SessionId, "-", LapId), SessionId, SessionName, LapId, TelemetryPoint, data = toint(Data), Email
    | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId, Email
    | extend LapDistanceTraveled = MaxDistance - MinDistance
    | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);
    let session_laptime =
    car_telemetry
    | where TelemetryPoint =="CurrentLapTimer"
    | where todouble(Data) > 0
    //| where StartTime between (startofday(now()).. endofday(now()))
    | project sessionLapKey = strcat(SessionId, "-", LapId), timer = todouble(Data) * 1s, StartTime, EndTime
    | summarize StartTime=min(StartTime), EndTime=max(StartTime), LapTime = max(timer) by sessionLapKey;
    session_lap_summary
    | join kind=inner session_laptime on sessionLapKey
    | project SessionId, SessionName, LapId, StartTime, EndTime, LapTime, LapTime_string = tostring(LapTime), InvalidLap, LapDistanceTraveled, Email
    | sort by LapTime asc
    | filter InvalidLap == false
    | extend Rank=row_rank_min(LapTime)
}
.create-or-alter function with (folder = "Packages\\Plotly", docstring = "Render gauge chart using plotly template", skipvalidation = "true") plotly_gauge_fl(value:real, max_range:real=real(null), mode:string="gauge+number", chart_title:string="", font_color:string="black", bar_color:string="green", bar_bg_color:string="lightgreen", tick_color:string="darkblue", tick_width:int=1) {
    let gauge_chart = toscalar(PlotlyTemplate | where name == "gauge" | project plotly);
    print plotly = gauge_chart
    | extend plotly=replace_string(plotly, '$VALUE$', tostring(value))
    | extend plotly=replace_string(plotly, '$MAX_RANGE$', iff(isnull(max_range), 'null', tostring(max_range)))
    | extend plotly=replace_string(plotly, '$MODE$', mode)
    | extend plotly=replace_string(plotly, '$TITLE$', chart_title)
    | extend plotly=replace_string(plotly, '$FONT_COLOR$', font_color)
    | extend plotly=replace_string(plotly, '$BAR_COLOR$', bar_color)
    | extend plotly=replace_string(plotly, '$BAR_BG_COLOR$', bar_bg_color)
    | extend plotly=replace_string(plotly, '$TICK_COLOR$', tick_color)
    | extend plotly=replace_string(plotly, '$TICK_WIDTH$', tostring(tick_width))
    | project plotly
}
.create-or-alter materialized-view with (Folder = "Gold layer materialized views")  ongoingRaceSession on table car_telemetry { car_telemetry | summarize arg_max(StartTime, *) by CarId }
.alter table car_telemetry policy update "[{\"IsEnabled\":true,\"Source\":\"rawtelemetry\",\"Query\":\"GetCarTelemetry\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
