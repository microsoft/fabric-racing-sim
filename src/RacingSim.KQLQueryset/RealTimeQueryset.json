{
  "queryset": {
    "version": "1.0.0",
    "dataSources": [
      {
        "id": "d78bdf52-3a5b-4ddf-bf2c-f5e34cca557c",
        "clusterUri": "",
        "type": "Fabric",
        "databaseItemId": "c0d8a17c-46b7-8722-48ee-e7e2a912e896",
        "databaseItemName": "RacingSim"
      }
    ],
    "tabs": [
      {
        "id": "bdd506d2-7239-44a5-bd1b-c9c74ddd14c1",
        "content": "// Main Silver layer Car Telemetry table with a single row per data point and channel\n.set-or-append car_telemetry <|\nrawtelemetry\n| extend StartTime= unixtime_milliseconds_todatetime(tolong(Timespan.StartTS)) , EndTime = unixtime_milliseconds_todatetime(tolong(Timespan.EndTS))\n| mv-expand Data\n| project TelemetryPoint = ChannelId , CarId, SessionId, LapId, StartTime, EndTime, Data, SessionName, Email, Telephone\n\n\n//Update policy to send live telemetry from Raw to Silver Forza table\n.create-or-alter function GetCarTelemetry()\n{\nrawtelemetry\n| extend StartTime= unixtime_milliseconds_todatetime(tolong(Timespan.StartTS)) , EndTime = unixtime_milliseconds_todatetime(tolong(Timespan.EndTS))\n| mv-expand Data\n| project TelemetryPoint = ChannelId , CarId, SessionId, LapId, StartTime, EndTime, Data, SessionName, Email, Telephone\n}\n\n// Update policy for car_telemetry table\n.alter table car_telemetry policy update\n```\n[\n    {\n        \"IsEnabled\": true,\n        \"Source\": \"rawtelemetry\",\n        \"Query\": \"GetCarTelemetry\",\n        \"IsTransactional\": true,\n        \"PropagateIngestionProperties\": false\n    }\n]\n```  \n\n// Function to return session summaries\n.create-or-alter function GetSessions() {\n    car_telemetry\n    | summarize Date=format_datetime(min(StartTime), 'yyyy-MM-dd'), StartTime=format_datetime(min(StartTime),'H:mm:ss'), EndTime=format_datetime(max(EndTime),'H:mm:ss') by SessionId, SessionName, CarId, Email, Telephone\n    | filter SessionName != \"Anonymous\"\n}\n\n\n// Function to return a summary of each session and lap\n// NOTE:  Silversone circuit is 5.89Km along the centre line, we can use this to determine if the player completed the lap\n// If the driver has completed less than 5500m, then assume they've not finished a lap (or massively cut corners)\n// There is also an anomaly whereby if a user pasues and quits the game, the telemetry shows the full distance of a 3 lap race (5890 * 3 = 17670)\n.create-or-alter function  GetSessionLapData() {\n    let session_lap_summary =\n    car_telemetry\n    | where TelemetryPoint ==\"DistanceTraveled\"\n    | where (todouble(Data)) > 0\n    | project sessionLapKey = strcat(SessionId, \"-\", LapId), SessionId, SessionName, LapId, TelemetryPoint, data = toint(Data)\n    | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId\n    | extend LapDistanceTraveled = MaxDistance - MinDistance\n    | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);\n    let session_laptime =\n    car_telemetry\n    | where TelemetryPoint ==\"CurrentLapTimer\"\n    | where todouble(Data) > 0\n    | project sessionLapKey = strcat(SessionId, \"-\", LapId), LapTime = todouble(Data) * 1s, StartTime, EndTime\n    | summarize arg_max(StartTime, *) by sessionLapKey;\n    //| summarize StartTime=min(StartTime), EndTime=max(EndTime), LapTime = max(timer) by sessionLapKey;\n    session_lap_summary\n    | join kind=inner session_laptime on sessionLapKey\n    | project SessionId, SessionName, sessionLapKey, LapId,StartTime, EndTime, tostring(LapTime), InvalidLap, LapDistanceTraveled\n    | sort by LapTime asc\n    | filter InvalidLap == false\n    | extend Rank=row_rank_min(LapTime)\n}\n\n\n// Function to created a pivoted view of the telemetry data\n// the function pivots around the channel \n.create-or-alter function  GetPivotedTelemetryData() {    \n    car_telemetry\n   // | where SessionId == pSessionId\n    | where (TelemetryPoint == \"Gear\" and Data <> 11) or TelemetryPoint in (\"Steer\", \"DistanceTraveled\", \"Brake\", \"Accel\", \"Speed\", \"PositionX\", \"PositionZ\")\n    | order by StartTime asc\n    | project sessionLapKey = strcat(SessionId, \"-\", LapId), EndTime, TelemetryPoint, point=todouble(Data)\n    | evaluate pivot(TelemetryPoint, avg(point));\n}\n\n.create-or-alter materialized-view ongoingRaceSession on table car_telemetry\n{\n    car_telemetry | summarize arg_max(StartTime, *) by CarId\n}\n\n.create async materialized-view with (\n        backfill=true,\n        effectiveDateTime=datetime(2024-11-18)\n    )\n    ongoingRaceSession on table car_telemetry\n{\n    car_telemetry | summarize arg_max(StartTime, *) by CarId\n}\n\n.create-or-alter function  GenerateLeaderboard() {\n    let session_lap_summary =\n    car_telemetry\n    | where TelemetryPoint ==\"DistanceTraveled\"\n    //| where StartTime between (startofday(now()).. endofday(now()))\n    | where (todouble(Data)) > 0\n    | project sessionLapKey = strcat(SessionId, \"-\", LapId), SessionId, SessionName, LapId, TelemetryPoint, data = toint(Data), Email\n    | summarize MinDistance = min(data), MaxDistance = max(data) by sessionLapKey, SessionId, SessionName, LapId, Email\n    | extend LapDistanceTraveled = MaxDistance - MinDistance\n    | extend InvalidLap = iif((LapDistanceTraveled < 5000) or (LapDistanceTraveled >= 17670), true, false);\n    let session_laptime =\n    car_telemetry\n    | where TelemetryPoint ==\"CurrentLapTimer\"\n    | where todouble(Data) > 0\n    //| where StartTime between (startofday(now()).. endofday(now()))\n    | project sessionLapKey = strcat(SessionId, \"-\", LapId), timer = todouble(Data) * 1s, StartTime, EndTime\n    | summarize StartTime=min(StartTime), EndTime=max(StartTime), LapTime = max(timer) by sessionLapKey;\n    session_lap_summary\n    | join kind=inner session_laptime on sessionLapKey\n    | project SessionId, SessionName, LapId, StartTime, EndTime, LapTime, LapTime_string = tostring(LapTime), InvalidLap, LapDistanceTraveled, Email\n    | sort by LapTime asc\n    | filter InvalidLap == false\n    | extend Rank=row_rank_min(LapTime)\n}\n\n.alter table car_telemetry folder 'Silver Layer'\n\n.alter function GetCarTelemetry folder 'Bronze to Silver Transformation Functions'\n\n.alter function GenerateLeaderboard folder 'Gold layer views'\n\n.alter materialized-view ongoingRaceSession folder 'Gold layer materialized views'\n\n.set PlotlyTemplate <| cluster('help.kusto.windows.net').database('Samples').PlotlyTemplate\n\n.create-or-alter function with (folder = \"Packages\\\\Plotly\", docstring = \"Render gauge chart using plotly template\")\nplotly_gauge_fl(value:real, max_range:real=real(null), mode:string='gauge+number', chart_title:string='',font_color:string='black',\n                    bar_color:string='green', bar_bg_color:string='lightgreen', tick_color:string='darkblue', tick_width:int=1)\n{\n    let gauge_chart = toscalar(PlotlyTemplate | where name == \"gauge\" | project plotly);\n    print plotly = gauge_chart\n    | extend plotly=replace_string(plotly, '$VALUE$', tostring(value))\n    | extend plotly=replace_string(plotly, '$MAX_RANGE$', iff(isnull(max_range), 'null', tostring(max_range)))\n    | extend plotly=replace_string(plotly, '$MODE$', mode)\n    | extend plotly=replace_string(plotly, '$TITLE$', chart_title)\n    | extend plotly=replace_string(plotly, '$FONT_COLOR$', font_color)\n    | extend plotly=replace_string(plotly, '$BAR_COLOR$', bar_color)\n    | extend plotly=replace_string(plotly, '$BAR_BG_COLOR$', bar_bg_color)\n    | extend plotly=replace_string(plotly, '$TICK_COLOR$', tick_color)\n    | extend plotly=replace_string(plotly, '$TICK_WIDTH$', tostring(tick_width))\n    | project plotly\n}",
        "title": "Tab",
        "dataSourceId": "d78bdf52-3a5b-4ddf-bf2c-f5e34cca557c"
      }
    ]
  }
}